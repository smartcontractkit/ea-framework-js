# This is the entry point for CI. It will setup the application, then run lint, test, and eventually publish if not the main branch
name: 'Version bump branch only contains version change'
on:
  pull_request:

jobs:
  validateVersionBumpPR:
    if: ${{ startsWith(github.head_ref, 'version-bump') }}
    runs-on: ubuntu-latest
    concurrency: validate-${{ github.ref}}
    outputs:
      MESSAGE: ${{ steps.validate-pr-change.outputs.MESSAGE }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
      - name: Check if created PR only contains version change
        id: validate-pr-change
        run: |
          git fetch
          PR_SHA="${{ github.head_ref }}"
          MAIN_SHA="refs/remotes/origin/${{ github.base_ref }}"
          FILES=$(git diff --name-only $PR_SHA $MAIN_SHA)

          if [[ ! $FILES == "package.json" ]]; then
            MESSAGE="Expected the only modified file to be package.json, received: $FILES"
            echo "MESSAGE=$MESSAGE" >> $GITHUB_OUTPUT
            exit 1
          fi

          # Extract changes from the body of the diff
          SUBS=$(git diff $PR_SHA $MAIN_SHA | grep -E '^- +"') # "-E" lets you use standard special chars, '+' in this case
          ADDS=$(git diff $PR_SHA $MAIN_SHA | grep -E '^\+ +"')

          # Check that there's only 1 change, if this commit only contains a version tick, package.json will contain exactly one add and one subtract
          SUB_COUNT=$(echo "$SUBS" | wc -l | tr -dc '0-9') # tr -dc deletes any character except digits since wc adds padding spaces
          ADD_COUNT=$(echo "$ADDS" | wc -l | tr -dc '0-9')
          if [[ ! $SUB_COUNT == 1 || ! $ADD_COUNT == 1 ]]; then
            MESSAGE="Expected exactly one add and one subtract in package.json, received: $SUB_COUNT subtracts and $ADD_COUNT adds"
            echo "MESSAGE=$MESSAGE" >> $GITHUB_OUTPUT
            exit 1
          fi

          # Assert that the one change picked up in the initial grep is a change containing the version
          VERSION_PAT='"version": +"([0-9]+\.){2}[0-9]+'
          if [[ ! $SUBS =~ $VERSION_PAT || ! $ADDS =~ $VERSION_PAT ]] ; then
            MESSAGE="Could not detect if the change in this PR was a version change. Expected (\"version\": \"#.#.#\"), received: $SUBS and $ADDS"
            echo "MESSAGE=$MESSAGE" >> $GITHUB_OUTPUT
            exit 1
          fi
  reportResult:
    if: ${{ always() }} # Always run, even if a previous step fails, since we always want to post a result message/comment
    runs-on: ubuntu-latest
    needs:
      - validateVersionBumpPR
    steps:
      - name: Post success or failure to workflow run
        uses: actions/github-script@v6
        with:
          script: |
            // This message is only visible when drilling into the workflow run, so we don't show a success or cancelled message
            // since the only reason you'd be looking at this run is if it failed and was blocking your PR merge
            const needs = ${{ toJSON(needs) }}

            const { MESSAGE } = needs?.validateVersionBumpPR?.outputs
            const status = needs?.validateVersionBumpPR?.result

            if (status === 'failure'){
              core.error(`Failed to validate version bump PR: ${MESSAGE}`)
            }
