name: 'Open Version Bump PR'

on:
  workflow_dispatch:
    inputs:
      version-type:
        description: 'How to tick the version (none, patch, minor, major)'
        required: true
        default: 'none'
      dry-run:
        description: 'If true, skips commit on npm version and passes the --dry-run flag to npm publish. Useful for testing.'
        required: false
        default: 'false'
  pull_request:
    types:
      - closed

jobs:
  preflight: # Check that labels include a version bump, and extract the version bump label
    runs-on: ubuntu-latest
    if: (github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch' )
    outputs:
      MESSAGE: ${{ steps.validate.outputs.MESSAGE }}
      JOB_NAME: ${{ steps.set-job-name.outputs.JOB_NAME }}
      VERSION_INSTRUCTION: ${{ steps.validate.outputs.VERSION_INSTRUCTION }}
    steps:
      - id: set-job-name
        run: echo "JOB_NAME=${{ github.job }}" >> $GITHUB_OUTPUT
      - uses: actions/checkout@v3
      - id: validate
        name: Validate that version bump labels are on the PR
        uses: ./.github/actions/validate-version-labels
        with:
          LABELS: ${{ join(github.event.pull_request.labels.*.name, ',') || inputs.version-type }}

  createVersionBumpPR:
    if: (github.event.pull_request.merged == true || inputs.version-type != 'none' || inputs.dry-run == 'true') && needs.preflight.outputs.VERSION_INSTRUCTION != 'version-bump'
    runs-on: ubuntu-latest
    needs: preflight # Will be skipped if preflight is skipped, which causes this to not run on closes w/o merge unless it's a manual run
    outputs:
      PR_NUMBER: ${{ steps.create-pr.outputs.pull-request-number }}
      PR_URL: ${{ steps.create-pr.outputs.pull-request-url }}
      MESSAGE: ${{ steps.validate-pr-change.outputs.MESSAGE || steps.tick-version.outputs.MESSAGE }}
      JOB_NAME: ${{ steps.set-job-name.outputs.JOB_NAME }}
      VERSION_TAG: ${{ steps.tick-version.outputs.VERSION_TAG }}
    steps:
      - id: set-job-name
        run: echo "JOB_NAME=${{ github.job }}" >> $GITHUB_OUTPUT
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.base_ref || github.ref }} # Explicit ref required to push from PR because of github internals
      - uses: ./.github/actions/set-git-credentials
      - id: tick-version
        run: |
          VERSION_INSTRUCTION=${{ needs.preflight.outputs.VERSION_INSTRUCTION }}

          if [[ $VERSION_INSTRUCTION == "none" ]]; then
            echo "No version bump required"
            exit 0    
          elif [[ -z $VERSION_INSTRUCTION ]]; then 
            MESSAGE="`createVersionBumpPR failed` because no `VERSION_INSTRUCTION` was provided. This is most likely because the `preflight` job or [validate_version_labels](./.github/actions/validate_version_labels) isn't producing output."
            echo "MESSAGE=$MESSAGE" >> $GITHUB_OUTPUT
            exit 1
          fi

          if ! npm version $VERSION_INSTRUCTION ; then
            MESSAGE="Failed to tick version with `npm version $VERSION_INSTRUCTION`"
            echo "MESSAGE=$MESSAGE" >> $GITHUB_OUTPUT
            exit 1
          fi

          # Can't use `npm show . version` because that will show the version of the package in the registry, not the version in package.json, and we haven't published yet
          PACKAGE_VERSION=$(cat package.json \
            | grep version \
            | head -1 \
            | awk -F: '{ print $2 }' \
            | sed 's/[", ]//g')  
          echo "VERSION_TAG=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
      - id: create-pr
        name: Create PR
        if: inputs.dry-run != 'true'
        uses: peter-evans/create-pull-request@v3 # Creates a new branch, adds a commit, and opens a PR
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'Bump version to ${{ steps.tick-version.outputs.VERSION_TAG }}, original branch: ${{ github.head_ref || github.ref_name}}'
          title: 'Bump version to ${{ steps.tick-version.outputs.VERSION_TAG }}'
          body: |
            This PR was created by the [createVersionBumpPR](./.github/actions/tick-version) GitHub action. It will be merged automatically once checks are successful.
          branch: 'version-bump/${{ steps.tick-version.outputs.VERSION_TAG }}'
          delete-branch: true
          reviewers: ${{github.event.issue.user.login }} #This will be empty if run this job is run manually
          labels: version-bump
          base: ${{ github.base_ref || 'main' }} #always use target branch from PR or main when running manually because we always need some base branch to compare to

  post-result-to-pr:
    runs-on: ubuntu-latest
    if: ${{ always() }} # Always run, even if a previous step fails, since we always want to post a result message/comment
    needs:
      - preflight
      - createVersionBumpPR
    steps:
      - name: Post success or failure comment to PR
        uses: actions/github-script@v6
        with:
          script: |
            // `needs` isn't loaded into `actions/github-script@v6`.context, so we have to read it from the outer context
            // Using toJSON will dump a string representation of the object verbatim, which effective generates code for the `needs` javascript variable below
            const needs = ${{ toJSON(needs) }}

            // Note, it's possible to iterate over jobs to show multiple failures, but we instead consolidate since each job depends on the prior.
            // needs["JOB"] will be undefined for skipped jobs, so spreading will show the latest failure in the chain
            const { MESSAGE, JOB_NAME, VERSION_TAG, PR_URL } = {
              ...needs?.preflight?.outputs,
              ...needs?.createVersionBumpPR?.outputs,
            }

            // This workflow always runs on PR close, and this job always runs because of always(). 
            // We have limited access to PR context, so check for a universally set param to determine if the PR was merged
            // A skipped job is a successful job, so we can't check skipped.
             if(!JOB_NAME) {
              core.notice("No job name found, won't post comment to PR")
              return
            }

            const failed = needs?.preflight?.result == 'failure' || needs?.createVersionBumpPR?.result == 'failure'
            const cancelled = needs?.preflight?.result == 'cancelled' || needs?.createVersionBumpPR?.result == 'cancelled'

            const cancelledMessage = `:x: ${JOB_NAME} was cancelled.`
            let failureMessage = `:x: failed to run create-pr/publish workflow`
            let successMessage = `:white_check_mark: successfully ran create-pr/publish workflow.`

            if (JOB_NAME === 'createVersionBumpPR') {
              successMessage = `:rocket: Successfully created version bump PR: ${PR_URL}`
              failureMessage = `:x: failed to create version bump PR`        
            } else if (JOB_NAME === 'preflight') {
              successMessage = `:rocket: Successfully ran preflight checks.`
              failureMessage = `:x: failed to run preflight checks`
            }

            failureMessage = `${failureMessage}  
                               Failure message: ${MESSAGE || "No message provided"}
                               Failed job: [${JOB_NAME || "Unknown"}](https://github.com/smartcontractkit/ea-framework-js/actions/runs/${{ github.run_id }})`


            const body = failed ? failureMessage : cancelled ? cancelledMessage : successMessage

            if(context.eventName == 'pull_request'){
              core.notice("This is a pr, posting comment")
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner, // Required for Rest API route, not used for comment
                repo: context.repo.repo,
                body
              })
            } 
                      
            // Regardless of whether we create a PR comment, add an error message to the job so we can see it in the Actions tab
            (failed || cancelled) ? core.error(body) : core.notice(body)
          github-token: ${{secrets.GITHUB_TOKEN}}
